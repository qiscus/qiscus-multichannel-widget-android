apply plugin: 'jacoco'

ext {
    coverageExclusions = [
            '**/*Activity*.*',
            '**/*Fragment*.*',
            '**/*Base*.*',
            '**/*Layout*.*',
            '**/*View*.*',
            '**/*Anim*.*',
            '**/*Receiver*.*',
            '**/*Notification*.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/model/**',
            '**/PNUtil.kt'
    ]
//    '**/*Dialog*.*',
//    '**/*Adapter*.*',
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test).configureEach {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.required = true
        html.required =  true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: coverageExclusions)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: coverageExclusions)
    def mainSrc = "/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree], [kotlinDebugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            "**/**/*.exec", "**/**/*.ec"
    ]))
}